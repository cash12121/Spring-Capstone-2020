using DataTransferObjects;
using LogicLayer;
using LogicLayerInterfaces;
using PresentationUtilityCode;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Windows;
using System.Windows.Controls;

namespace WPFPresentationLayer.PersonnelPages
{
    /// <summary>
    /// Interaction logic for ViewPersonnelRequests.xaml
    /// </summary>
    public partial class ViewPersonnelRequests : Page
    {
        IAvailabilityManager _availabilityManager;
        IRequestManager _requestManager;
        IShiftManager _shiftManager;
        IUserManager _userManager;
        PetUniverseUser _user;

        /// <summary>
        /// Creator: Kaleb Bachert
        /// Created: 2/20/2020
        /// Approver: Lane Sandburg
        /// 
        /// This is the default constructor
        /// </summary>
        /// <remarks>
        /// Updated By: NA
        /// Updated: NA
        /// Update: NA
        /// 
        /// </remarks>

        public ViewPersonnelRequests()
        {
            _availabilityManager = new AvailabilityManager();
            _requestManager = new RequestManager();
            _shiftManager = new ShiftManager();
            _userManager = new UserManager();
            _user = new PetUniverseUser();

            InitializeComponent();
        }

        /// <summary>
        /// Creator: Kaleb Bachert
        /// Created:2/20/2020
        /// Approver: Lane Sandburg
        /// 
        /// This is the detailed constructor
        /// </summary>
        /// <remarks>
        /// Updated By: NA
        /// Updated: NA
        /// Update: NA
        /// 
        /// </remarks>

        public ViewPersonnelRequests(PetUniverseUser user)
        {
            _availabilityManager = new AvailabilityManager();
            _requestManager = new RequestManager();
            _shiftManager = new ShiftManager();
            _userManager = new UserManager();
            _user = user;

            InitializeComponent();
        }

        /// <summary>
        /// Creator: Kaleb Bachert
        /// Created: 2020/2/14
        /// Approver: Lane Sandburg
        /// 
        /// This method is called when the Open Requests DataGrid is done generating Columns
        /// </summary>
        /// <remarks>
        /// Updated By: NA
        /// Updated: NA
        /// Update: NA
        /// 
        /// </remarks>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void dgOpenRequests_AutoGeneratedColumns(object sender, EventArgs e)
        {


            //dgOpenRequests.Columns.RemoveAt(8); //Approved By
            //dgOpenRequests.Columns.RemoveAt(6);
            //dgOpenRequests.Columns.RemoveAt(5); //Date Approved
            //dgOpenRequests.Columns.RemoveAt(4);
            //dgOpenRequests.Columns.RemoveAt(3);
            dgOpenRequests.Columns.RemoveAt(0);
            dgOpenRequests.Columns.RemoveAt(0);
            dgOpenRequests.Columns.RemoveAt(0);
            dgOpenRequests.Columns.RemoveAt(0);
            dgOpenRequests.Columns.RemoveAt(6);
            dgOpenRequests.Columns.RemoveAt(5);

            dgOpenRequests.Columns.RemoveAt(2);
            dgOpenRequests.Columns.RemoveAt(1);
            dgOpenRequests.Columns[0].Header = "Requesting Employee Email";
            dgOpenRequests.Columns[1].Header = "Request Type";
            dgOpenRequests.Columns[2].Header = "Request Creation Date";

        }

        /// <summary>
        /// Creator: Kaleb Bachert
        /// Created: 2020/2/14
        /// Approver: Lane Sandburg
        /// 
        /// This method is called when the Requests Tab in Personnel, is loaded
        /// </summary>
        /// <remarks>
        /// Updated By: NA
        /// Updated: NA
        /// Update: NA
        /// 
        /// </remarks>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void dgOpenRequests_Loaded(object sender, RoutedEventArgs e)
        {
            populateRequestList(!(bool)chkViewClosedRequests.IsChecked);
        }

        /// <summary>
        /// Creator: Kaleb Bachert
        /// Created: 2020/2/14
        /// Approver: Lane Sandburg
        /// 
        /// This method is called to update the dgOpenRequests ItensSource
        /// </summary>
        /// <remarks>
        /// Updated By: NA
        /// Updated: NA
        /// Update: NA
        /// 
        /// </remarks>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void populateRequestList(bool open)
        {
            try
            {
                dgOpenRequests.ItemsSource = _requestManager.RetrieveRequestsByStatus(open);
            }
            catch (Exception ex)
            {
                WPFErrorHandler.ErrorMessage(ex.InnerException.Message, ex.Message);
            }
        }


        /// <summary>
        /// Creator: Kaleb Bachert
        /// Created: 2020/2/16
        /// Approver: Lane Sandburg
        /// 
        /// This method is called when btnRequestDetails is clicked, determines request type, 
        /// and changes canvas accordingly
        /// </summary>
        /// <remarks>
        /// Updated By: Chase Schulte
        /// Updated: 2020/04/13
        /// Update: Added case for Availability Change
        /// Approver: Kaleb Bachert
        /// 
        /// </remarks>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnRequestDetails_Click(object sender, RoutedEventArgs e)
        {
            Window window = null;
            RequestVM selectedRequest = (RequestVM)dgOpenRequests.SelectedItem;
            AvailabilityRequestVM selectedAvailabilityRequest = null;
            if (selectedRequest != null)
            {
                switch (selectedRequest.RequestTypeID)
                {
                    case "Time Off":
                        canPersonnelRequests.Visibility = Visibility.Hidden;
                        canTimeOffRequestDetails.Visibility = Visibility.Visible;
                        TimeOffRequestVM selectedTimeOffRequest = null;

                        try
                        {
                            
                            selectedTimeOffRequest = _requestManager.RetrieveTimeOffRequestByRequestID(
                                selectedRequest.RequestID);
                        }
                        catch (Exception)
                        {
                            throw;
                        }

                        selectDateRange(selectedTimeOffRequest);
                        setTimeOffRequestTextFields(selectedTimeOffRequest);
                        break;


                    case "Availability Change":
                        hideAllAvailabilityInputs();
                        cmbDaySelector.ItemsSource = new List<string>() { "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday" };


                        txtMondayStartTime.Visibility = Visibility.Visible;
                        txtMondayEndTime.Visibility = Visibility.Visible;
                        lblMondayStartTime.Visibility = Visibility.Visible;
                        lblMondayEndTime.Visibility = Visibility.Visible;
                        cmbDaySelector.SelectedIndex = 0;
                        canPersonnelRequests.Visibility = Visibility.Hidden;
                        canTimeOffRequestDetails.Visibility = Visibility.Hidden;
                        canAvailabilityRequestDetails.Visibility = Visibility.Visible;

                        try
                        {
                            selectedAvailabilityRequest = _requestManager.RetrieveAvailabilityRequestByID(
                                selectedRequest.RequestID);
                            setTextFieldsForAvailability(selectedAvailabilityRequest);
                            dgAvailability.ItemsSource = _availabilityManager.RetrieveAvailabilityByUserID(selectedAvailabilityRequest.RequestingUserID);
                            var request = _requestManager.RetrieveAvailabilityRequestByID(((Request)dgOpenRequests.SelectedItem).RequestID);
                            List<AvailabilityVM> availabilities = _availabilityManager.RetrieveAvailabilityByUserID(request.RequestingUserID);
                            List<AvailabilityVM> availabilityVMs = new List<AvailabilityVM>();
                            requestedAvailabilities(selectedAvailabilityRequest, availabilityVMs);
                            dgRequestedAvailability.ItemsSource = availabilityVMs;
                            updatedAvailibilitesPreview(request, availabilities);
                            dgNewAvailability.ItemsSource = availabilities;

                        }
                        catch (Exception ex)
                        {
                            WPFErrorHandler.ErrorMessage("Error", "Availability Request Not Available");
                        }



                        break;


                    case "Schedule Change":
                        canPersonnelRequests.Visibility = Visibility.Hidden;
                        canScheduleChangeRequestDetails.Visibility = Visibility.Visible;
                        ScheduleChangeRequestVM selectedScheduleChangeRequest = null;

                        try
                        {
                            selectedScheduleChangeRequest = _requestManager.RetrieveScheduleChangeRequestByRequestID(
                                selectedRequest.RequestID);
                            selectedScheduleChangeRequest.EmployeeWorkingEmail = selectedRequest.RequestingEmail;
                        }
                        catch (Exception)
                        {
                            throw;
                        }

                        setScheduleChangeRequestTextFields(selectedScheduleChangeRequest);
                        break;

                    default:
                        WPFErrorHandler.ErrorMessage("REQUEST TYPE NOT IMPLEMENTED!", "Implementation");
                        break;
                }
            }
            else
            {
                MessageBox.Show("Make a Selection First!");
            }

            if (window != null)
            {
                if (window.ShowDialog() == true)
                {
                    populateRequestList(!(bool)chkViewClosedRequests.IsChecked);
                }
            }
        }

        /// <summary>
        ///  Creator: Kaleb Bachert
        ///  Created: 2020/2/17
        ///  Approver: Lane Sandburg
        ///  
        ///  This button simply closes the window.
        /// </summary>
        /// <remarks>
        /// Updated By: NA
        /// Updated: NA
        /// Update: NA
        /// 
        /// </remarks>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnTimeOffCancel_Click(object sender, RoutedEventArgs e)
        {
            canTimeOffRequestDetails.Visibility = Visibility.Hidden;
            canPersonnelRequests.Visibility = Visibility.Visible;
        }

        /// <summary>
        ///  Creator: Kaleb Bachert
        ///  Created: 2020/4/8
        ///  Approver: Lane Sandburg
        ///  
        ///  This button simply closes the window.
        /// </summary>
        /// <remarks>
        /// Updated By: NA
        /// Updated: NA
        /// Update: NA
        /// 
        /// </remarks>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnScheduleChangeCancel_Click(object sender, RoutedEventArgs e)
        {
            canScheduleChangeRequestDetails.Visibility = Visibility.Hidden;
            canPersonnelRequests.Visibility = Visibility.Visible;
        }

        /// <summary>
        ///  Creator: Kaleb Bachert
        ///  Created: 2020/2/19
        ///  Approver: Lane Sandburg
        ///  
        ///  This method is called to select the dates mentioned in the request
        ///  on the calendar control
        /// </summary>
        /// <remarks>
        /// Updated By: NA
        /// Updated: NA
        /// Update: NA
        /// 
        /// </remarks>
        /// <param name="request"></param>

        private void selectDateRange(TimeOffRequestVM request)
        {
            calTimeOffDateRange.SelectedDates.Clear();

            DateTime startDate = Convert.ToDateTime(request.EffectiveStart);
            if (request.EffectiveEnd != null && request.EffectiveEnd != "")
            {
                DateTime endDate = Convert.ToDateTime(request.EffectiveEnd);

                calTimeOffDateRange.SelectedDates.AddRange(startDate, endDate);
            }
            else
            {
                calTimeOffDateRange.SelectedDate = startDate;
            }

            calTimeOffDateRange.DisplayDateStart = Convert.ToDateTime(request.EffectiveStart);
            calTimeOffDateRange.DisplayDateEnd = Convert.ToDateTime(request.EffectiveEnd);
        }

        /// <summary>
        ///  Creator: Kaleb Bachert
        ///  Created: 2020/2/19
        ///  Approver: Lane Sandburg
        ///  
        ///  This method is called to fill in the text fields for
        ///  Time Off Request details
        /// </summary>
        /// <remarks>
        /// Updated By: NA
        /// Updated: NA
        /// Update: NA
        /// 
        /// </remarks>
        /// <param name="request"></param>
        private void setTimeOffRequestTextFields(TimeOffRequestVM request)
        {
            //Gets the Date only from EffectiveStart
            txtTimeOffStartDate.Text = Convert.ToDateTime(request.EffectiveStart).ToString("d");

            //Gets the Date only from EffectiveEnd
            if (request.EffectiveEnd != null && request.EffectiveEnd != "")
            {
                txtTimeOffEndDate.Text = Convert.ToDateTime(request.EffectiveEnd).ToString("d");
            }

            //Gets the Time only from EffectiveStart
            txtTimeOffStartTime.Text = Convert.ToDateTime(request.EffectiveStart).TimeOfDay.ToString();

            //Gets the Time only from EffectiveEnd
            txtTimeOffEndTime.Text = Convert.ToDateTime(request.EffectiveEnd).TimeOfDay.ToString();
        }

        /// <summary>
        ///  Creator: Kaleb Bachert
        ///  Created: 2020/4/9
        ///  Approver: Lane Sandburg
        ///  
        ///  This method is called to fill in the text fields for
        ///  Schedule Change Request details
        /// </summary>
        /// <remarks>
        /// Updated By: NA
        /// Updated: NA
        /// Update: NA
        /// 
        /// </remarks>
        /// <param name="request"></param>
        private void setScheduleChangeRequestTextFields(ScheduleChangeRequestVM request)
        {
            //Sets the Employee Working field
            txtScheduleChangeEmployeeScheduled.Text = request.EmployeeWorkingEmail;

            //Sets the Shift Department field
            txtScheduleChangeDepartment.Text = request.DepartmentID;

            //Sets the Shift Date field
            txtScheduleChangeShiftDate.Text = request.Date;

            //Sets the Shift Start Time field
            txtScheduleChangeStartTime.Text = request.StartTime;

            //Sets the Shift End Time field
            txtScheduleChangeEndTime.Text = request.EndTime;

            //Sets the list of Users who can take the shift, clearing it first, and setting the default value
            cmbScheduleChangeReplacementEmployees.Items.Clear();
            cmbScheduleChangeReplacementEmployees.Items.Add("-- Select a Replacement --");

            List<PetUniverseUser> replacementUsers;

            replacementUsers = _userManager.RetrieveUsersAbleToWork(
                        Convert.ToDateTime(request.Date),
                        (Convert.ToDateTime(request.Date)).ToString("dddd"),
                        Convert.ToDateTime(request.StartTime),
                        Convert.ToDateTime(request.EndTime),
                        request.Role);

            foreach (PetUniverseUser user in replacementUsers)
            {
                cmbScheduleChangeReplacementEmployees.Items.Add(user.Email);
            }

            cmbScheduleChangeReplacementEmployees.SelectedItem = "-- Select a Replacement --";
        }

        /// <summary>
        ///  Creator: Kaleb Bachert
        ///  Created: 2020/2/19
        ///  Approver: Lane Sandburg
        ///  
        ///  This button will pop up a confirmation of approval, and approve the request
        /// </summary>
        /// <remarks>
        /// Updated By: NA
        /// Updated: NA
        /// Update: NA
        /// 
        /// </remarks>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnTimeOffApprove_Click(object sender, RoutedEventArgs e)
        {
            MessageBoxResult confirmApproval = MessageBox.Show("Are you sure you want to approve this request?",
                                      "Confirm Approval?", MessageBoxButton.YesNo, MessageBoxImage.Question);
            if (confirmApproval == MessageBoxResult.Yes)
            {
                try
                {
                    RequestVM selectedRequest = ((RequestVM)dgOpenRequests.SelectedItem);
                    int requestsAffected = _requestManager.ApproveRequest(selectedRequest.RequestID, _user.PUUserID, "Time Off");

                    if (1 == requestsAffected)
                    {
                        WPFErrorHandler.SuccessMessage("Successfully Approved Request!");

                        TimeOffRequestVM selectedTimeOffRequest = _requestManager.RetrieveTimeOffRequestByRequestID(selectedRequest.RequestID);

                        //Adding approved request to a table for TimeOff for the schedule to read from
                        ActiveTimeOff activeTimeOff = new ActiveTimeOff()
                        {
                            UserID = selectedRequest.RequestingEmployeeID,
                            StartDate = Convert.ToDateTime(selectedTimeOffRequest.EffectiveStart),
                            EndDate = Convert.ToDateTime(selectedTimeOffRequest.EffectiveEnd)
                        };

                        _requestManager.AddActiveTimeOff(activeTimeOff);
                    }
                    else if (1 < requestsAffected)
                    {
                        WPFErrorHandler.ErrorMessage("MULTIPLE REQUESTS AFFECTED! ALERT SYSTEM ADMINISTRATOR!", "Database");
                    }
                    else if (0 == requestsAffected)
                    {
                        WPFErrorHandler.ErrorMessage("The request was either already approved, or could not be found!", "Request");
                    }
                }
                catch (Exception ex)
                {
                    WPFErrorHandler.ErrorMessage(ex.InnerException.Message, ex.Message);
                }

                //Return to requests page with data refreshed
                canTimeOffRequestDetails.Visibility = Visibility.Hidden;
                canPersonnelRequests.Visibility = Visibility.Visible;
                populateRequestList(!(bool)chkViewClosedRequests.IsChecked);
            }
        }

        /// <summary>
        ///  Creator: Kaleb Bachert
        ///  Created: 2020/4/15
        ///  Approver: Lane Sandburg
        ///  
        ///  This button will pop up a confirmation of approval, and approve the request
        ///  It will also check to see if this change will put the User's hours over 40 for that week 
        /// 
        /// </summary>
        /// <remarks>
        /// Updated By: NA
        /// Updated: NA
        /// Update: NA
        /// 
        /// </remarks>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnScheduleChangeApprove_Click(object sender, RoutedEventArgs e)
        {
            //No Replacement Employee is selected
            if (cmbScheduleChangeReplacementEmployees.SelectedItem.Equals("-- Select a Replacement --"))
            {
                WPFErrorHandler.ErrorMessage("You must first select a replacement Employee. If no replacement Employees appear, none fit the criteria for replacement.", "Input");
            }
            //Replacement Employee is selected
            else
            {
                //The date, startTime and endTime of the shift, and the length of the shift in hours
                DateTime shiftDate = Convert.ToDateTime(txtScheduleChangeShiftDate.Text);
                TimeSpan startTime = TimeSpan.Parse(txtScheduleChangeStartTime.Text);
                TimeSpan endTime = TimeSpan.Parse(txtScheduleChangeEndTime.Text);
                double shiftHours;

                //If the shift stays in a single day
                if (endTime > startTime)
                {
                    shiftHours = (endTime - startTime).TotalHours;
                }
                //The Shift starts the previous night, and ends in the morning
                else
                {
                    //Last second of the night
                    TimeSpan dayEnd = new TimeSpan(23, 59, 59);
                    //First second of the morning
                    TimeSpan dayStart = new TimeSpan(0, 0, 0);

                    //Get difference between end of shift and start of day, add it to difference between start of shift and end of night
                    shiftHours = (endTime - dayStart).TotalHours + (dayEnd - startTime).TotalHours;
                }

                try
                {
                    //Converts selected Email (replacement User) to a PetUniverseUser
                    PetUniverseUser replacementUser = _userManager.getUserByEmail(cmbScheduleChangeReplacementEmployees.SelectedItem.ToString());

                    //Gets the start and end date of the schedule the shift is in, used to determine the hours worked that week
                    ScheduleWithHoursWorked scheduleContainingTheShift = _shiftManager.RetrieveScheduleHoursByUserAndDate(replacementUser.PUUserID, shiftDate);

                    //This will be the hours worked is the request is officially approved
                    double projectedHoursWorked;

                    //The week of the schedule that this shift is in, 1 or 2
                    int weekNumber;

                    //If shiftDate is before the second Sunday of the Schedule
                    if (shiftDate < scheduleContainingTheShift.ScheduleStartDate.AddDays(7))
                    {
                        projectedHoursWorked = scheduleContainingTheShift.FirstWeekHours + shiftHours;
                        weekNumber = 1;
                    }
                    //ShiftDate is on or after the second Sunday of the Schedule
                    else
                    {
                        projectedHoursWorked = scheduleContainingTheShift.SecondWeekHours + shiftHours;
                        weekNumber = 2;
                    }

                    MessageBoxResult confirmApproval;

                    //The User will have more than 40 hours that week if this is approved
                    if (projectedHoursWorked > 40)
                    {
                        confirmApproval = MessageBox.Show("This change will set " + replacementUser.FirstName.ToUpper() + " " + replacementUser.LastName.ToUpper() +
                            "'s" + Environment.NewLine + "hours for the week to: " + projectedHoursWorked + Environment.NewLine +
                            "Are you certain you want to commit this schedule change?" + Environment.NewLine + "THIS ACTION CANNOT BE UNDONE!",
                          "Confirm Approval?", MessageBoxButton.YesNo, MessageBoxImage.Question);
                    }
                    //Hours will not go over 40
                    else
                    {
                        confirmApproval = MessageBox.Show("Are you certain you want to give " + replacementUser.FirstName.ToUpper() + " " + replacementUser.LastName.ToUpper() +
                            " this shift?" + Environment.NewLine + "THIS ACTION CANNOT BE UNDONE!", "Confirm Approval?", MessageBoxButton.YesNo, MessageBoxImage.Question);
                    }

                    //Request has been approved and ready to be replaced with the selected replacement Employee
                    if (confirmApproval == MessageBoxResult.Yes)
                    {
                        //Approve the request
                        RequestVM selectedRequest = ((RequestVM)dgOpenRequests.SelectedItem);
                        int requestsAffected = _requestManager.ApproveRequest(selectedRequest.RequestID, _user.PUUserID, "Schedule Change");

                        if (1 == requestsAffected)
                        {
                            PetUniverseUser originalEmployeeWorking = _userManager.getUserByEmail(txtScheduleChangeEmployeeScheduled.Text);

                            //Getting the ScheduleChangeRequest from the Request
                            ScheduleChangeRequestVM selectedScheduleChangeRequest = _requestManager.RetrieveScheduleChangeRequestByRequestID(selectedRequest.RequestID);


                            //Decrease old employee's hours worked, increase the new employee's hours, save the new employee in the Shift's User field
                            _shiftManager.EditEmployeeHoursWorked(originalEmployeeWorking.PUUserID, scheduleContainingTheShift.ScheduleID, weekNumber, shiftHours * -1);
                            _shiftManager.EditEmployeeHoursWorked(replacementUser.PUUserID, scheduleContainingTheShift.ScheduleID, weekNumber, shiftHours);
                            _shiftManager.EditShiftUserWorking(selectedScheduleChangeRequest.ShiftID, replacementUser.PUUserID, originalEmployeeWorking.PUUserID);

                            WPFErrorHandler.SuccessMessage("Successfully Approved Request!");
                        }
                        else if (1 < requestsAffected)
                        {
                            WPFErrorHandler.ErrorMessage("MULTIPLE REQUESTS AFFECTED! ALERT SYSTEM ADMINISTRATOR!", "Database");
                        }
                        else if (0 == requestsAffected)
                        {
                            WPFErrorHandler.ErrorMessage("The request was either already approved, or could not be found!", "Request");
                        }

                    }
                }
                catch (Exception ex)
                {
                    WPFErrorHandler.ErrorMessage(ex.InnerException.Message, ex.Message);
                }

                //Return to requests page with data refreshed
                canScheduleChangeRequestDetails.Visibility = Visibility.Hidden;
                canPersonnelRequests.Visibility = Visibility.Visible;
                populateRequestList(!(bool)chkViewClosedRequests.IsChecked);
            }
        }

        /// <summary>
        ///  Creator: Kaleb Bachert
        ///  Created: 2020/2/19
        ///  Approver: Lane Sandburg
        ///  
        ///  Click event for chkViewClosedRequests to update which Requests re in the DataGrid
        /// </summary>
        /// <remarks>
        /// Updated By: NA
        /// Updated: NA
        /// Update: NA
        /// 
        /// </remarks>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void chkViewClosedRequests_Click(object sender, RoutedEventArgs e)
        {
            populateRequestList(!(bool)chkViewClosedRequests.IsChecked);
        }
        /// <summary>
        /// Creator: Chase Schulte
        /// Created: 04/11/2020
        /// Approver: Kaleb Bachert 
        /// 
        /// Cancel availability request
        /// </summary>
        ///
        /// <remarks>
        /// Updated By: NA
        /// Updated: NA
        /// Update: NA
        /// </remarks>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnAvailabilityCancel_Click(object sender, RoutedEventArgs e)
        {
            canAvailabilityRequestDetails.Visibility = Visibility.Hidden;
            canPersonnelRequests.Visibility = Visibility.Visible;
        }
        /// <summary>
        /// Creator: Chase Schulte
        /// Created: 04/13/2020
        /// Approver: Kaleb Bachert 
        /// 
        /// Populate dg with requested availabilites
        /// </summary>
        ///
        /// <remarks>
        /// Updated By: NA
        /// Updated: NA
        /// Update: NA
        /// </remarks>
        /// <param name="selectedAvailabilityRequest"></param>
        /// <param name="availabilityVMs"></param>
        private static void requestedAvailabilities(AvailabilityRequestVM selectedAvailabilityRequest, List<AvailabilityVM> availabilityVMs)
        {
            if (selectedAvailabilityRequest.MondayStartTime != "" && selectedAvailabilityRequest.MondayEndTime != "")
            {
                availabilityVMs.Add(new AvailabilityVM() { Name = selectedAvailabilityRequest.FirstName + " " + selectedAvailabilityRequest.LastName, DayOfWeek = "Monday", StartTime = selectedAvailabilityRequest.MondayStartTime, EndTime = selectedAvailabilityRequest.MondayEndTime });
            }
            if (selectedAvailabilityRequest.TuesdayStartTime != "" && selectedAvailabilityRequest.TuesdayEndTime != "")
            {
                availabilityVMs.Add(new AvailabilityVM() { Name = selectedAvailabilityRequest.FirstName + " " + selectedAvailabilityRequest.LastName, DayOfWeek = "Tuesday", StartTime = selectedAvailabilityRequest.TuesdayStartTime, EndTime = selectedAvailabilityRequest.TuesdayEndTime });
            }
            if (selectedAvailabilityRequest.WednesdayStartTime != "" && selectedAvailabilityRequest.WednesdayEndTime != "")
            {
                availabilityVMs.Add(new AvailabilityVM() { Name = selectedAvailabilityRequest.FirstName + " " + selectedAvailabilityRequest.LastName, DayOfWeek = "Wednesday", StartTime = selectedAvailabilityRequest.WednesdayStartTime, EndTime = selectedAvailabilityRequest.WednesdayEndTime });
            }
            if (selectedAvailabilityRequest.ThursdayStartTime != "" && selectedAvailabilityRequest.ThursdayEndTime != "")
            {
                availabilityVMs.Add(new AvailabilityVM() { Name = selectedAvailabilityRequest.FirstName + " " + selectedAvailabilityRequest.LastName, DayOfWeek = "Thursday", StartTime = selectedAvailabilityRequest.ThursdayStartTime, EndTime = selectedAvailabilityRequest.ThursdayEndTime });
            }
            if (selectedAvailabilityRequest.FridayStartTime != "" && selectedAvailabilityRequest.FridayEndTime != "")
            {
                availabilityVMs.Add(new AvailabilityVM() { Name = selectedAvailabilityRequest.FirstName + " " + selectedAvailabilityRequest.LastName, DayOfWeek = "Friday", StartTime = selectedAvailabilityRequest.FridayStartTime, EndTime = selectedAvailabilityRequest.FridayEndTime });
            }
            if (selectedAvailabilityRequest.SaturdayStartTime != "" && selectedAvailabilityRequest.SaturdayEndTime != "")
            {
                availabilityVMs.Add(new AvailabilityVM() { Name = selectedAvailabilityRequest.FirstName + " " + selectedAvailabilityRequest.LastName, DayOfWeek = "Saturday", StartTime = selectedAvailabilityRequest.SaturdayStartTime, EndTime = selectedAvailabilityRequest.SaturdayEndTime });
            }
            if (selectedAvailabilityRequest.SundayStartTime != "" && selectedAvailabilityRequest.SundayEndTime != "")
            {
                availabilityVMs.Add(new AvailabilityVM() { Name = selectedAvailabilityRequest.FirstName + " " + selectedAvailabilityRequest.LastName, DayOfWeek = "Sunday", StartTime = selectedAvailabilityRequest.SundayStartTime, EndTime = selectedAvailabilityRequest.SundayEndTime });
            }
        }
        /// <summary>
        /// Creator: Chase Schulte
        /// Created: 04/13/2020
        /// Approver: Kaleb Bachert 
        /// 
        /// Show a preivew of what will happen after approval in datagrid
        /// </summary>
        ///
        /// <remarks>
        /// Updated By: NA
        /// Updated: NA
        /// Update: NA
        /// </remarks>
        /// <param name="request"></param>
        /// <param name="availabilities"></param>
        private void updatedAvailibilitesPreview(AvailabilityRequestVM request, List<AvailabilityVM> availabilities)
        {
            if (txtMondayStartTime.Text != "" && txtMondayEndTime.Text != "")
            {
                int updated = 0;
                if (availabilities.FindAll(avs => avs.DayOfWeek == "Monday").Count >= 1)
                {
                    int newStartTime = Convert.ToInt32(request.MondayStartTime.Replace(":", ""));
                    int newEndTime = Convert.ToInt32(request.MondayEndTime.Replace(":", ""));
                    var mondayAvailabilities = availabilities.FindAll(avs => avs.DayOfWeek == "Monday");

                    foreach (var item in mondayAvailabilities)
                    {
                        int startTime = Convert.ToInt32(item.StartTime.Replace(":", ""));
                        int endTime = Convert.ToInt32(item.EndTime.Replace(":", ""));
                        if (Enumerable.Range(newStartTime, newEndTime - newStartTime).Contains(startTime) || Enumerable.Range(newStartTime, newEndTime - newStartTime).Contains(endTime))
                        {
                            availabilities.Remove(item);
                            if (updated == 0)
                            {
                                updated++;
                                availabilities.Add(new AvailabilityVM { DayOfWeek = "Monday", StartTime = request.MondayStartTime, EndTime = request.MondayEndTime, Name = request.FirstName + " " + request.LastName });
                            }

                        }
                    }
                }
                if (updated == 0)
                {
                    availabilities.Add(new AvailabilityVM { DayOfWeek = "Monday", StartTime = request.MondayStartTime, EndTime = request.MondayEndTime, Name = request.FirstName + " " + request.LastName });
                }
            }
            if (txtTuesdayStartTime.Text != "" && txtTuesdayEndTime.Text != "")
            {
                int updated = 0;
                if (availabilities.FindAll(avs => avs.DayOfWeek == "Tuesday").Count >= 1)
                {
                    int newStartTime = Convert.ToInt32(request.TuesdayStartTime.Replace(":", ""));
                    int newEndTime = Convert.ToInt32(request.TuesdayEndTime.Replace(":", ""));
                    var TuesdayAvailabilities = availabilities.FindAll(avs => avs.DayOfWeek == "Tuesday");

                    foreach (var item in TuesdayAvailabilities)
                    {
                        int startTime = Convert.ToInt32(item.StartTime.Replace(":", ""));
                        int endTime = Convert.ToInt32(item.EndTime.Replace(":", ""));
                        if (Enumerable.Range(newStartTime, newEndTime - newStartTime).Contains(startTime) || Enumerable.Range(newStartTime, newEndTime - newStartTime).Contains(endTime))
                        {
                            availabilities.Remove(item);
                            if (updated == 0)
                            {
                                updated++;
                                availabilities.Add(new AvailabilityVM { DayOfWeek = "Tuesday", StartTime = request.TuesdayStartTime, EndTime = request.TuesdayEndTime, Name = request.FirstName + " " + request.LastName });
                            }

                        }
                    }
                }
                if (updated == 0)
                {
                    availabilities.Add(new AvailabilityVM { DayOfWeek = "Tuesday", StartTime = request.TuesdayStartTime, EndTime = request.TuesdayEndTime, Name = request.FirstName + " " + request.LastName });
                }
            }
            if (txtWednesdayStartTime.Text != "" && txtWednesdayEndTime.Text != "")
            {
                int updated = 0;
                if (availabilities.FindAll(avs => avs.DayOfWeek == "Wednesday").Count >= 1)
                {
                    int newStartTime = Convert.ToInt32(request.WednesdayStartTime.Replace(":", ""));
                    int newEndTime = Convert.ToInt32(request.WednesdayEndTime.Replace(":", ""));
                    var WednesdayAvailabilities = availabilities.FindAll(avs => avs.DayOfWeek == "Wednesday");

                    foreach (var item in WednesdayAvailabilities)
                    {
                        int startTime = Convert.ToInt32(item.StartTime.Replace(":", ""));
                        int endTime = Convert.ToInt32(item.EndTime.Replace(":", ""));
                        if (Enumerable.Range(newStartTime, newEndTime - newStartTime).Contains(startTime) || Enumerable.Range(newStartTime, newEndTime - newStartTime).Contains(endTime))
                        {
                            availabilities.Remove(item);
                            if (updated == 0)
                            {
                                updated++;
                                availabilities.Add(new AvailabilityVM { DayOfWeek = "Wednesday", StartTime = request.WednesdayStartTime, EndTime = request.WednesdayEndTime, Name = request.FirstName + " " + request.LastName });
                            }

                        }
                    }
                }
                if (updated == 0)
                {
                    availabilities.Add(new AvailabilityVM { DayOfWeek = "Wednesday", StartTime = request.WednesdayStartTime, EndTime = request.WednesdayEndTime, Name = request.FirstName + " " + request.LastName });
                }
            }
            if (txtThursdayStartTime.Text != "" && txtThursdayEndTime.Text != "")
            {
                int updated = 0;
                if (availabilities.FindAll(avs => avs.DayOfWeek == "Thursday").Count >= 1)
                {
                    int newStartTime = Convert.ToInt32(request.ThursdayStartTime.Replace(":", ""));
                    int newEndTime = Convert.ToInt32(request.ThursdayEndTime.Replace(":", ""));
                    var ThursdayAvailabilities = availabilities.FindAll(avs => avs.DayOfWeek == "Thursday");

                    foreach (var item in ThursdayAvailabilities)
                    {
                        int startTime = Convert.ToInt32(item.StartTime.Replace(":", ""));
                        int endTime = Convert.ToInt32(item.EndTime.Replace(":", ""));
                        if (Enumerable.Range(newStartTime, newEndTime - newStartTime).Contains(startTime) || Enumerable.Range(newStartTime, newEndTime - newStartTime).Contains(endTime))
                        {
                            availabilities.Remove(item);
                            if (updated == 0)
                            {
                                updated++;
                                availabilities.Add(new AvailabilityVM { DayOfWeek = "Thursday", StartTime = request.ThursdayStartTime, EndTime = request.ThursdayEndTime, Name = request.FirstName + " " + request.LastName });
                            }

                        }
                    }
                }
                if (updated == 0)
                {
                    availabilities.Add(new AvailabilityVM { DayOfWeek = "Thursday", StartTime = request.ThursdayStartTime, EndTime = request.ThursdayEndTime, Name = request.FirstName + " " + request.LastName });
                }
            }
            if (txtFridayStartTime.Text != "" && txtFridayEndTime.Text != "")
            {
                int updated = 0;
                if (availabilities.FindAll(avs => avs.DayOfWeek == "Friday").Count >= 1)
                {
                    int newStartTime = Convert.ToInt32(request.FridayStartTime.Replace(":", ""));
                    int newEndTime = Convert.ToInt32(request.FridayEndTime.Replace(":", ""));
                    var FridayAvailabilities = availabilities.FindAll(avs => avs.DayOfWeek == "Friday");

                    foreach (var item in FridayAvailabilities)
                    {
                        int startTime = Convert.ToInt32(item.StartTime.Replace(":", ""));
                        int endTime = Convert.ToInt32(item.EndTime.Replace(":", ""));
                        if (Enumerable.Range(newStartTime, newEndTime - newStartTime).Contains(startTime) || Enumerable.Range(newStartTime, newEndTime - newStartTime).Contains(endTime))
                        {
                            availabilities.Remove(item);
                            if (updated == 0)
                            {
                                updated++;
                                availabilities.Add(new AvailabilityVM { DayOfWeek = "Friday", StartTime = request.FridayStartTime, EndTime = request.FridayEndTime, Name = request.FirstName + " " + request.LastName });
                            }

                        }
                    }
                }

            }
            if (txtSaturdayStartTime.Text != "" && txtSaturdayEndTime.Text != "")
            {
                int updated = 0;
                if (availabilities.FindAll(avs => avs.DayOfWeek == "Saturday").Count >= 1)
                {
                    int newStartTime = Convert.ToInt32(request.SaturdayStartTime.Replace(":", ""));
                    int newEndTime = Convert.ToInt32(request.SaturdayEndTime.Replace(":", ""));
                    var SaturdayAvailabilities = availabilities.FindAll(avs => avs.DayOfWeek == "Saturday");

                    foreach (var item in SaturdayAvailabilities)
                    {
                        {
                            availabilities.Remove(item);
                            if (updated == 0)
                            {
                                updated++;
                                availabilities.Add(new AvailabilityVM { DayOfWeek = "Saturday", StartTime = request.SaturdayStartTime, EndTime = request.SaturdayEndTime, Name = request.FirstName + " " + request.LastName });
                            }

                        }
                    }
                    if (updated == 0)
                    {
                        availabilities.Add(new AvailabilityVM { DayOfWeek = "Saturday", StartTime = request.SaturdayStartTime, EndTime = request.SaturdayEndTime, Name = request.FirstName + " " + request.LastName });
                    }
                }
                else
                {
                    availabilities.Add(new AvailabilityVM { DayOfWeek = "Saturday", StartTime = request.SaturdayStartTime, EndTime = request.SaturdayEndTime, Name = request.FirstName + " " + request.LastName });
                }


            }
            if (txtSundayStartTime.Text != "" && txtSundayEndTime.Text != "")
            {
                int updated = 0;
                if (availabilities.FindAll(avs => avs.DayOfWeek == "Sunday").Count >= 1)
                {
                    int newStartTime = Convert.ToInt32(request.SundayStartTime.Replace(":", ""));
                    int newEndTime = Convert.ToInt32(request.SundayEndTime.Replace(":", ""));
                    var SundayAvailabilities = availabilities.FindAll(avs => avs.DayOfWeek == "Sunday");

                    foreach (var item in SundayAvailabilities)
                    {
                        int startTime = Convert.ToInt32(item.StartTime.Replace(":", ""));
                        int endTime = Convert.ToInt32(item.EndTime.Replace(":", ""));
                        if (Enumerable.Range(newStartTime, newEndTime - newStartTime).Contains(startTime) || Enumerable.Range(newStartTime, newEndTime - newStartTime).Contains(endTime))
                        {
                            {
                                availabilities.Remove(item);
                                if (updated == 0)
                                {
                                    updated++;
                                    availabilities.Add(new AvailabilityVM { DayOfWeek = "Sunday", StartTime = request.SundayStartTime, EndTime = request.SundayEndTime, Name = request.FirstName + " " + request.LastName });
                                }

                            }
                        }
                    }

                }
                if (updated == 0)
                {
                    availabilities.Add(new AvailabilityVM { DayOfWeek = "Sunday", StartTime = request.SundayStartTime, EndTime = request.SundayEndTime, Name = request.FirstName + " " + request.LastName });
                }
            }
        }
        /// <summary>
        /// Creator: Chase Schulte
        /// Created: 04/13/2020
        /// Approver: Kaleb Bachert 
        /// 
        /// Populate textboxes for availabilities
        /// </summary>
        ///
        /// <remarks>
        /// Updated By: NA
        /// Updated: NA
        /// Update: NA
        /// </remarks>
        /// <param name="selectedAvailabilityRequest"></param>
        public void setTextFieldsForAvailability(AvailabilityRequestVM selectedAvailabilityRequest)
        {
            txtMondayEndTime.Text = selectedAvailabilityRequest.MondayEndTime;
            txtMondayStartTime.Text = selectedAvailabilityRequest.MondayStartTime;

            txtTuesdayStartTime.Text = selectedAvailabilityRequest.TuesdayStartTime;
            txtTuesdayEndTime.Text = selectedAvailabilityRequest.TuesdayEndTime;

            txtWednesdayStartTime.Text = selectedAvailabilityRequest.WednesdayStartTime;
            txtWednesdayEndTime.Text = selectedAvailabilityRequest.WednesdayEndTime;

            txtThursdayStartTime.Text = selectedAvailabilityRequest.ThursdayStartTime;
            txtThursdayEndTime.Text = selectedAvailabilityRequest.ThursdayEndTime;

            txtFridayEndTime.Text = selectedAvailabilityRequest.FridayEndTime;
            txtFridayStartTime.Text = selectedAvailabilityRequest.FridayStartTime;

            txtSaturdayStartTime.Text = selectedAvailabilityRequest.SaturdayStartTime;
            txtSaturdayEndTime.Text = selectedAvailabilityRequest.SaturdayEndTime;

            txtSundayStartTime.Text = selectedAvailabilityRequest.SundayStartTime;
            txtSundayEndTime.Text = selectedAvailabilityRequest.SundayEndTime;

            txtEmpID.Text = selectedAvailabilityRequest.FirstName + " " + selectedAvailabilityRequest.LastName;
        }

        /// <summary>
        /// Creator: Chase Schulte
        /// Created: 04/11/2020
        /// Approver: Kaleb Bachert 
        /// 
        /// Approve an availability
        /// </summary>
        ///
        /// <remarks>
        /// Updated By: NA
        /// Updated: NA
        /// Update: NA
        /// </remarks>
        private void btnAvailabilityApprove_Click(object sender, RoutedEventArgs e)
        {
            MessageBoxResult confirmApproval = MessageBox.Show("Are you sure you want to approve this request?",
                                      "Confirm Approval?", MessageBoxButton.YesNo, MessageBoxImage.Question);
            if (confirmApproval == MessageBoxResult.Yes)
            {
                try
                {
                    int requestsAffected = _requestManager.ApproveRequest(((Request)dgOpenRequests.SelectedItem).RequestID, _user.PUUserID, "Availability Change");

                    if (1 == requestsAffected)
                    {

                        WPFErrorHandler.SuccessMessage("Successfully Approved Request!");
                        //Deactivate all availabilites
                        var request = _requestManager.RetrieveAvailabilityRequestByID(((Request)dgOpenRequests.SelectedItem).RequestID);
                        List<AvailabilityVM> availabilities = _availabilityManager.RetrieveAvailabilityByUserID(request.RequestingUserID);
                        updateAvailabilites(request, availabilities);

                    }
                    else if (1 < requestsAffected)
                    {
                        WPFErrorHandler.ErrorMessage("MULTIPLE REQUESTS AFFECTED! ALERT SYSTEM ADMINISTRATOR!", "Database");
                    }
                    else if (0 == requestsAffected)
                    {
                        WPFErrorHandler.ErrorMessage("The request was either already approved, or could not be found!", "Request");
                    }
                }
                catch (Exception ex)
                {
                    WPFErrorHandler.ErrorMessage(ex.InnerException.Message, ex.Message);
                }


                //Return to requests page with data refreshed
                canAvailabilityRequestDetails.Visibility = Visibility.Hidden;
                canPersonnelRequests.Visibility = Visibility.Visible;
                populateRequestList(!(bool)chkViewClosedRequests.IsChecked);
            }
        }
        /// <summary>
        /// Creator: Chase Schulte
        /// Created: 04/13/2020
        /// Approver: Kaleb Bachert 
        /// 
        /// update the availability based on what was shown in the dgNewAvailability
        /// </summary>
        ///
        /// <remarks>
        /// Updated By: NA
        /// Updated: NA
        /// Update: NA
        /// </remarks>
        /// <param name="request"></param>
        /// <param name="availabilities"></param>
        private void updateAvailabilites(AvailabilityRequestVM request, List<AvailabilityVM> availabilities)
        {
            if (txtMondayStartTime.Text != "" && txtMondayEndTime.Text != "")
            {
                int updated = 0;
                if (availabilities.FindAll(avs => avs.DayOfWeek == "Monday").Count >= 1)
                {
                    int newStartTime = Convert.ToInt32(request.MondayStartTime.Replace(":", ""));
                    int newEndTime = Convert.ToInt32(request.MondayEndTime.Replace(":", ""));
                    var mondayAvailabilities = availabilities.FindAll(avs => avs.DayOfWeek == "Monday");

                    foreach (var item in mondayAvailabilities)
                    {
                        int startTime = Convert.ToInt32(item.StartTime.Replace(":", ""));
                        int endTime = Convert.ToInt32(item.EndTime.Replace(":", ""));
                        if (Enumerable.Range(newStartTime, newEndTime - newStartTime).Contains(startTime) || Enumerable.Range(newStartTime, newEndTime - newStartTime).Contains(endTime))
                        {
                            _availabilityManager.DeactivateAvailability(item.AvailabilityID);
                            if (updated == 0)
                            {
                                updated++;
                                _availabilityManager.AddAvailability(new EmployeeAvailability { DayOfWeek = "Monday", StartTime = request.MondayStartTime, EndTime = request.MondayEndTime, EmployeeID = request.RequestingUserID });
                            }
                            //_availabilityManager.UpdateAvailability(new Availability { DayOfWeek = "Monday", StartTime = request.MondayStartTime, EndTime = request.MondayEndTime, UserID = request.RequestingUserID }, item);

                        }
                    }
                }
                if (updated == 0)
                {
                    _availabilityManager.AddAvailability(new EmployeeAvailability { DayOfWeek = "Monday", StartTime = request.MondayStartTime, EndTime = request.MondayEndTime, EmployeeID = request.RequestingUserID });
                }
            }
            if (txtTuesdayStartTime.Text != "" && txtTuesdayEndTime.Text != "")
            {
                int updated = 0;
                if (availabilities.FindAll(avs => avs.DayOfWeek == "Tuesday").Count >= 1)
                {
                    int newStartTime = Convert.ToInt32(request.TuesdayStartTime.Replace(":", ""));
                    int newEndTime = Convert.ToInt32(request.TuesdayEndTime.Replace(":", ""));
                    var TuesdayAvailabilities = availabilities.FindAll(avs => avs.DayOfWeek == "Tuesday");

                    foreach (var item in TuesdayAvailabilities)
                    {
                        int startTime = Convert.ToInt32(item.StartTime.Replace(":", ""));
                        int endTime = Convert.ToInt32(item.EndTime.Replace(":", ""));
                        if (Enumerable.Range(newStartTime, newEndTime - newStartTime).Contains(startTime) || Enumerable.Range(newStartTime, newEndTime - newStartTime).Contains(endTime))
                        {
                            _availabilityManager.DeactivateAvailability(item.AvailabilityID);
                            if (updated == 0)
                            {
                                updated++;
                                _availabilityManager.AddAvailability(new EmployeeAvailability { DayOfWeek = "Tuesday", StartTime = request.TuesdayStartTime, EndTime = request.TuesdayEndTime, EmployeeID = request.RequestingUserID });
                            }

                        }
                    }
                }
                if (updated == 0)
                {
                    _availabilityManager.AddAvailability(new EmployeeAvailability { DayOfWeek = "Tuesday", StartTime = request.TuesdayStartTime, EndTime = request.TuesdayEndTime, EmployeeID = request.RequestingUserID });
                }
            }
            if (txtWednesdayStartTime.Text != "" && txtWednesdayEndTime.Text != "")
            {
                int updated = 0;
                if (availabilities.FindAll(avs => avs.DayOfWeek == "Wednesday").Count >= 1)
                {
                    int newStartTime = Convert.ToInt32(request.WednesdayStartTime.Replace(":", ""));
                    int newEndTime = Convert.ToInt32(request.WednesdayEndTime.Replace(":", ""));
                    var WednesdayAvailabilities = availabilities.FindAll(avs => avs.DayOfWeek == "Wednesday");

                    foreach (var item in WednesdayAvailabilities)
                    {
                        int startTime = Convert.ToInt32(item.StartTime.Replace(":", ""));
                        int endTime = Convert.ToInt32(item.EndTime.Replace(":", ""));
                        if (Enumerable.Range(newStartTime, newEndTime - newStartTime).Contains(startTime) || Enumerable.Range(newStartTime, newEndTime - newStartTime).Contains(endTime))
                        {
                            _availabilityManager.DeactivateAvailability(item.AvailabilityID);
                            if (updated == 0)
                            {
                                updated++;
                                _availabilityManager.AddAvailability(new EmployeeAvailability { DayOfWeek = "Wednesday", StartTime = request.WednesdayStartTime, EndTime = request.WednesdayEndTime, EmployeeID = request.RequestingUserID });
                            }


                        }
                    }
                }
                if (updated == 0)
                {
                    _availabilityManager.AddAvailability(new EmployeeAvailability { DayOfWeek = "Wednesday", StartTime = request.WednesdayStartTime, EndTime = request.WednesdayEndTime, EmployeeID = request.RequestingUserID });
                }
            }
            if (txtThursdayStartTime.Text != "" && txtThursdayEndTime.Text != "")
            {
                int updated = 0;
                if (availabilities.FindAll(avs => avs.DayOfWeek == "Thursday").Count >= 1)
                {
                    int newStartTime = Convert.ToInt32(request.ThursdayStartTime.Replace(":", ""));
                    int newEndTime = Convert.ToInt32(request.ThursdayEndTime.Replace(":", ""));
                    var ThursdayAvailabilities = availabilities.FindAll(avs => avs.DayOfWeek == "Thursday");

                    foreach (var item in ThursdayAvailabilities)
                    {
                        int startTime = Convert.ToInt32(item.StartTime.Replace(":", ""));
                        int endTime = Convert.ToInt32(item.EndTime.Replace(":", ""));
                        if (Enumerable.Range(newStartTime, newEndTime - newStartTime).Contains(startTime) || Enumerable.Range(newStartTime, newEndTime - newStartTime).Contains(endTime))
                        {
                            _availabilityManager.DeactivateAvailability(item.AvailabilityID);
                            if (updated == 0)
                            {
                                updated++;
                                _availabilityManager.AddAvailability(new EmployeeAvailability { DayOfWeek = "Thursday", StartTime = request.ThursdayStartTime, EndTime = request.ThursdayEndTime, EmployeeID = request.RequestingUserID });
                            }


                        }
                    }
                }
                if (updated == 0)
                {
                    _availabilityManager.AddAvailability(new EmployeeAvailability { DayOfWeek = "Thursday", StartTime = request.ThursdayStartTime, EndTime = request.ThursdayEndTime, EmployeeID = request.RequestingUserID });
                }
            }
            if (txtFridayStartTime.Text != "" && txtFridayEndTime.Text != "")
            {
                int updated = 0;
                if (availabilities.FindAll(avs => avs.DayOfWeek == "Friday").Count >= 1)
                {
                    int newStartTime = Convert.ToInt32(request.FridayStartTime.Replace(":", ""));
                    int newEndTime = Convert.ToInt32(request.FridayEndTime.Replace(":", ""));
                    var FridayAvailabilities = availabilities.FindAll(avs => avs.DayOfWeek == "Friday");

                    foreach (var item in FridayAvailabilities)
                    {
                        int startTime = Convert.ToInt32(item.StartTime.Replace(":", ""));
                        int endTime = Convert.ToInt32(item.EndTime.Replace(":", ""));
                        if (Enumerable.Range(newStartTime, newEndTime - newStartTime).Contains(startTime) || Enumerable.Range(newStartTime, newEndTime - newStartTime).Contains(endTime))
                        {
                            _availabilityManager.DeactivateAvailability(item.AvailabilityID);
                            if (updated == 0)
                            {
                                updated++;
                                _availabilityManager.AddAvailability(new EmployeeAvailability { DayOfWeek = "Friday", StartTime = request.FridayStartTime, EndTime = request.FridayEndTime, EmployeeID = request.RequestingUserID });
                            }


                        }
                    }
                }
                if (updated == 0)
                {
                    _availabilityManager.AddAvailability(new EmployeeAvailability { DayOfWeek = "Friday", StartTime = request.FridayStartTime, EndTime = request.FridayEndTime, EmployeeID = request.RequestingUserID });
                }
            }
            if (txtSaturdayStartTime.Text != "" && txtSaturdayEndTime.Text != "")
            {
                int updated = 0;
                if (availabilities.FindAll(avs => avs.DayOfWeek == "Saturday").Count >= 1)
                {
                    int newStartTime = Convert.ToInt32(request.SaturdayStartTime.Replace(":", ""));
                    int newEndTime = Convert.ToInt32(request.SaturdayEndTime.Replace(":", ""));
                    var SaturdayAvailabilities = availabilities.FindAll(avs => avs.DayOfWeek == "Saturday");

                    foreach (var item in SaturdayAvailabilities)
                    {
                        int startTime = Convert.ToInt32(item.StartTime.Replace(":", ""));
                        int endTime = Convert.ToInt32(item.EndTime.Replace(":", ""));
                        if (Enumerable.Range(newStartTime, newEndTime - newStartTime).Contains(startTime) || Enumerable.Range(newStartTime, newEndTime - newStartTime).Contains(endTime))
                        {
                            _availabilityManager.DeactivateAvailability(item.AvailabilityID);
                            if (updated == 0)
                            {
                                updated++;
                                _availabilityManager.AddAvailability(new EmployeeAvailability { DayOfWeek = "Saturday", StartTime = request.SaturdayStartTime, EndTime = request.SaturdayEndTime, EmployeeID = request.RequestingUserID });
                            }


                        }
                    }
                }
                if (updated == 0)
                {
                    _availabilityManager.AddAvailability(new EmployeeAvailability { DayOfWeek = "Saturday", StartTime = request.SaturdayStartTime, EndTime = request.SaturdayEndTime, EmployeeID = request.RequestingUserID });
                }
            }
            if (txtSundayStartTime.Text != "" && txtSundayEndTime.Text != "")
            {
                int updated = 0;
                if (availabilities.FindAll(avs => avs.DayOfWeek == "Sunday").Count >= 1)
                {
                    int newStartTime = Convert.ToInt32(request.SundayStartTime.Replace(":", ""));
                    int newEndTime = Convert.ToInt32(request.SundayEndTime.Replace(":", ""));
                    var SundayAvailabilities = availabilities.FindAll(avs => avs.DayOfWeek == "Sunday");

                    foreach (var item in SundayAvailabilities)
                    {
                        int startTime = Convert.ToInt32(item.StartTime.Replace(":", ""));
                        int endTime = Convert.ToInt32(item.EndTime.Replace(":", ""));
                        if (Enumerable.Range(newStartTime, newEndTime - newStartTime).Contains(startTime) || Enumerable.Range(newStartTime, newEndTime - newStartTime).Contains(endTime))
                        {
                            _availabilityManager.DeactivateAvailability(item.AvailabilityID);
                            if (updated == 0)
                            {
                                updated++;
                                _availabilityManager.AddAvailability(new EmployeeAvailability { DayOfWeek = "Sunday", StartTime = request.SundayStartTime, EndTime = request.SundayEndTime, EmployeeID = request.RequestingUserID });
                            }


                        }
                    }
                }
                if (updated == 0)
                {
                    _availabilityManager.AddAvailability(new EmployeeAvailability { DayOfWeek = "Sunday", StartTime = request.SundayStartTime, EndTime = request.SundayEndTime, EmployeeID = request.RequestingUserID });
                }
            }
        }


        /// <summary>
        /// Creator: Chase Schulte
        /// Created: 04/13/2020
        /// Approver: Kaleb Bachert 
        /// 
        /// Populate dg columns
        /// </summary>
        ///
        /// <remarks>
        /// Updated By: NA
        /// Updated: NA
        /// Update: NA
        /// </remarks>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void DgAvailability_AutoGeneratedColumns(object sender, EventArgs e)
        {

            dgAvailability.Columns.RemoveAt(2);
            dgAvailability.Columns.RemoveAt(1);
            dgAvailability.Columns.RemoveAt(4);
            dgAvailability.Columns.RemoveAt(0);
            
            dgAvailability.Columns[0].Header = "Day";
            dgAvailability.Columns[1].Header = "Start Time";
            dgAvailability.Columns[2].Header = "End Time";

        }
        /// <summary>
        /// Creator: Chase Schulte
        /// Created: 04/13/2020
        /// Approver: Kaleb Bachert 
        /// 
        /// Populate dg columns
        /// </summary>
        ///
        /// <remarks>
        /// Updated By: NA
        /// Updated: NA
        /// Update: NA
        /// </remarks>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void DgNewAvailability_AutoGeneratedColumns(object sender, EventArgs e)
        {
            dgNewAvailability.Columns.RemoveAt(2);
            dgNewAvailability.Columns.RemoveAt(1);
            dgNewAvailability.Columns.RemoveAt(4);
            dgNewAvailability.Columns.RemoveAt(0);

            dgNewAvailability.Columns[0].Header = "Day";
            dgNewAvailability.Columns[1].Header = "Start Time";
            dgNewAvailability.Columns[2].Header = "End Time";

        }
        /// <summary>
        /// Creator: Chase Schulte
        /// Created: 04/13/2020
        /// Approver: Kaleb Bachert 
        /// 
        /// Hide all input and labels
        /// </summary>
        ///
        /// <remarks>
        /// Updated By: NA
        /// Updated: NA
        /// Update: NA
        /// </remarks>
        private void hideAllAvailabilityInputs()
        {
            txtMondayStartTime.Visibility = Visibility.Hidden;
            txtMondayEndTime.Visibility = Visibility.Hidden;
            lblMondayStartTime.Visibility = Visibility.Hidden;
            lblMondayEndTime.Visibility = Visibility.Hidden;

            txtTuesdayStartTime.Visibility = Visibility.Hidden;
            txtTuesdayEndTime.Visibility = Visibility.Hidden;
            lblTuesdayStartTime.Visibility = Visibility.Hidden;
            lblTuesdayEndTime.Visibility = Visibility.Hidden;

            txtWednesdayStartTime.Visibility = Visibility.Hidden;
            txtWednesdayEndTime.Visibility = Visibility.Hidden;
            lblWednesdayStartTime.Visibility = Visibility.Hidden;
            lblWednesdayEndTime.Visibility = Visibility.Hidden;

            txtThursdayStartTime.Visibility = Visibility.Hidden;
            txtThursdayEndTime.Visibility = Visibility.Hidden;
            lblThursdayStartTime.Visibility = Visibility.Hidden;
            lblThursdayEndTime.Visibility = Visibility.Hidden;

            txtFridayStartTime.Visibility = Visibility.Hidden;
            txtFridayEndTime.Visibility = Visibility.Hidden;
            lblFridayStartTime.Visibility = Visibility.Hidden;
            lblFridayEndTime.Visibility = Visibility.Hidden;

            txtSaturdayStartTime.Visibility = Visibility.Hidden;
            txtSaturdayEndTime.Visibility = Visibility.Hidden;
            lblSaturdayStartTime.Visibility = Visibility.Hidden;
            lblSaturdayEndTime.Visibility = Visibility.Hidden;

            txtSundayStartTime.Visibility = Visibility.Hidden;
            txtSundayEndTime.Visibility = Visibility.Hidden;
            lblSundayStartTime.Visibility = Visibility.Hidden;
            lblSundayEndTime.Visibility = Visibility.Hidden;
        }
        /// <summary>
        /// Creator: Chase Schulte
        /// Created: 04/13/2020
        /// Approver: Kaleb Bachert 
        /// 
        /// Show details based on day selected
        /// </summary>
        ///
        /// <remarks>
        /// Updated By: NA
        /// Updated: NA
        /// Update: NA
        /// </remarks>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void CmbDaySelector_DropDownClosed(object sender, EventArgs e)
        {
            hideAllAvailabilityInputs();
            switch (cmbDaySelector.Text)
            {
                case "Monday":
                    txtMondayStartTime.Visibility = Visibility.Visible;
                    txtMondayEndTime.Visibility = Visibility.Visible;
                    lblMondayStartTime.Visibility = Visibility.Visible;
                    lblMondayEndTime.Visibility = Visibility.Visible;
                    break;
                case "Tuesday":
                    txtTuesdayStartTime.Visibility = Visibility.Visible;
                    txtTuesdayEndTime.Visibility = Visibility.Visible;
                    lblTuesdayStartTime.Visibility = Visibility.Visible;
                    lblTuesdayEndTime.Visibility = Visibility.Visible;
                    break;
                case "Wednesday":
                    txtWednesdayStartTime.Visibility = Visibility.Visible;
                    txtWednesdayEndTime.Visibility = Visibility.Visible;
                    lblWednesdayStartTime.Visibility = Visibility.Visible;
                    lblWednesdayEndTime.Visibility = Visibility.Visible;
                    break;
                case "Thursday":
                    txtThursdayStartTime.Visibility = Visibility.Visible;
                    txtThursdayEndTime.Visibility = Visibility.Visible;
                    lblThursdayStartTime.Visibility = Visibility.Visible;
                    lblThursdayEndTime.Visibility = Visibility.Visible;
                    break;
                case "Friday":
                    txtFridayStartTime.Visibility = Visibility.Visible;
                    txtFridayEndTime.Visibility = Visibility.Visible;
                    lblFridayStartTime.Visibility = Visibility.Visible;
                    lblFridayEndTime.Visibility = Visibility.Visible;
                    break;
                case "Saturday":
                    txtSaturdayStartTime.Visibility = Visibility.Visible;
                    txtSaturdayEndTime.Visibility = Visibility.Visible;
                    lblSaturdayStartTime.Visibility = Visibility.Visible;
                    lblSaturdayEndTime.Visibility = Visibility.Visible;
                    break;
                case "Sunday":
                    txtSundayStartTime.Visibility = Visibility.Visible;
                    txtSundayEndTime.Visibility = Visibility.Visible;
                    lblSundayStartTime.Visibility = Visibility.Visible;
                    lblSundayEndTime.Visibility = Visibility.Visible;
                    break;
                default:
                    break;
            }
        }
        /// <summary>
        /// Creator: Chase Schulte
        /// Created: 04/13/2020
        /// Approver: Kaleb Bachert 
        /// 
        /// Populate dg columns
        /// </summary>
        ///
        /// <remarks>
        /// Updated By: NA
        /// Updated: NA
        /// Update: NA
        /// </remarks>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void DgRequestedAvailability_AutoGeneratedColumns(object sender, EventArgs e)
        {
            dgRequestedAvailability.Columns.RemoveAt(2);
            dgRequestedAvailability.Columns.RemoveAt(1);
            dgRequestedAvailability.Columns.RemoveAt(4);
            dgRequestedAvailability.Columns.RemoveAt(0);

            dgRequestedAvailability.Columns[0].Header = "Day";
            dgRequestedAvailability.Columns[1].Header = "Start Time";
            dgRequestedAvailability.Columns[2].Header = "End Time";
        }
    }
}

