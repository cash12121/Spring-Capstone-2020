using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using DataTransferObjects;
using LogicLayer;
using LogicLayerInterfaces;
using PresentationUtilityCode;

namespace WPFPresentationLayer.InventoryPages
{
    /// <summary>
    /// Creator: Brandyn T. Coverdill
    /// Created: 2020/04/10
	/// Approver: Kaleb Bachert
	/// Approver: Jesse Tomash
    ///
    /// Page class that handles viewing Shelter Inventory.
    /// </summary>
    public partial class ViewShelterItems : Page
    {

        private IItemManager _itemManager;
        private IItemCategoryManager _itemCategoryManager;

        public ViewShelterItems()
        {
            _itemManager = new ItemManager();
            _itemCategoryManager = new ItemCategoryManager();
            InitializeComponent();
        }
        /// <summary>
        /// Creator: Brandyn T. Coverdill
        /// Created: 2020/04/10
        /// Approver: Kaleb Bachert
        /// Approver: Jesse Tomash
        ///
        /// Method that generates the columns for the view shelter inventory datagrid.
        /// </summary>
        ///
        /// <remarks>
        /// Updated By: 
        /// Updated: 
        /// Update: 
        /// </remarks>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void dgViewShelterInventory_AutoGeneratedColumns(object sender, EventArgs e)
        {

            dgViewShelterInventory.Columns.RemoveAt(3);
            dgViewShelterInventory.Columns.RemoveAt(6);
            dgViewShelterInventory.Columns[0].Header = "Item ID";
            dgViewShelterInventory.Columns[1].Header = "Item Name";
            dgViewShelterInventory.Columns[2].Header = "Item Quantity";
            dgViewShelterInventory.Columns[3].Header = "Category";
            dgViewShelterInventory.Columns[4].Header = "Description";

            foreach (var column in this.dgViewShelterInventory.Columns)
            {
                column.Width = new DataGridLength(1, DataGridLengthUnitType.Star);
            }
        }

        /// <summary>
        /// Creator: Brandyn T. Coverdill
        /// Created: 2020/04/10
        /// Approver: Kaleb Bachert
        /// Approver: Jesse Tomash
        ///
        /// When datagrid is loaded, add items to the datagrid.
        /// </summary>
        ///
        /// <remarks>
        /// Updated By: 
        /// Updated: 
        /// Update:
        /// </remarks>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void dgViewShelterInventory_Loaded(object sender, RoutedEventArgs e)
        {
            dgViewShelterInventory.ItemsSource = _itemManager.retrieveItems().Where(r => r.ShelterItem == true);
        }



        /// <summary>
        /// Creator: Brandyn T. Coverdill
        /// Created: 2020/04/10
        /// Approver: Kaleb Bachert
        /// Approver: Jesse Tomash
        ///
        /// This Button shows the Add Shelter Item Screen.
        /// </summary>
        ///
        /// <remarks>
        /// Updated By: 
        /// Updated: 
        /// Update:
        /// </remarks>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnAddShelterItems_Click(object sender, RoutedEventArgs e)
        {
            this.NavigationService?.Navigate(new AddShelterItem());
        }

        /// <summary>
        /// Creator: Brandyn T. Coverdill
        /// Created: 2020/04/10
        /// Approver: Kaleb Bachert
        /// Approver: Jesse Tomash
        ///
        /// This click event opens the view item detail screen.
        /// </summary>
        ///
        /// <remarks>
        /// Updated By: 
        /// Updated: 
        /// Update:
        /// </remarks>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnViewShelterItem_Click(object sender, RoutedEventArgs e)
        {
            Item item = (Item)dgViewShelterInventory.SelectedItem;
            if (dgViewShelterInventory.SelectedItem != null)
            {
                this.NavigationService?.Navigate(new EditShelterItem(item));
            }
            else
            {
                "Please pick an item to view.".ErrorMessage();
            }
        }

        /// <summary>
        /// Creator: Brandyn T. Coverdill
        /// Created: 2020/04/10
        /// Approver: Kaleb Bachert
        /// Approver: Jesse Tomash
        ///
        /// Click event for deactivate button
        /// </summary>
        ///
        /// <remarks>
        /// Updated By: Brandyn T. Coverdill
        /// Updated: 2020-04-10
        /// Update: Changed the item manager method to retrieve items. As well, depending on
        /// whether the item is active or not, it will do their coresponding activity to reactivate or
        /// deactivate them.
        /// </remarks>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnDeactivateShelterItem_Click(object sender, RoutedEventArgs e)
        {
            Item item = (Item)dgViewShelterInventory.SelectedItem;
            if (dgViewShelterInventory.SelectedItem != null && item.Active == true)
            {
                _itemManager.deactivateItem(item);
                dgViewShelterInventory.ItemsSource = _itemManager.retrieveItems().Where(r => r.ShelterItem == true);
            }
            else if (dgViewShelterInventory.SelectedItem != null && item.Active == false)
            {
                _itemManager.reactivateItems(item);
                dgViewShelterInventory.ItemsSource = _itemManager.retrieveItems().Where(r => r.ShelterItem == true);
            }
            else
            {
                "Please pick an item to update.".ErrorMessage();
            }
        }

        /// <summary>
        /// Creator: Brandyn T. Coverdill
        /// Created: 2020/04/10
        /// Approver: Kaleb Bachert
        /// Approver: Jesse Tomash
        /// 
        /// This method populates the Datagrid by the Search Field. (Empty Shows all items).
        /// 
        /// </summary>
        ///
        /// <remarks>
        /// Updated By: 
        /// Updated: 
        /// Update:
        /// </remarks>
        private void btnSearchShelterItem_Click(object sender, RoutedEventArgs e)
        {
            // Save text from the text area.
            string searchedCategory = txtSearchShelterItem.Text.ToString();
            // Get a list of all the items in the database.
            var itemsForSearch = _itemManager.retrieveItems().Where(r => r.ShelterItem == true);
            // Get a list of all the categories in the database.
            List<ItemCategory> itemCategories = new List<ItemCategory>();
            itemCategories = _itemCategoryManager.listItemCategories();
            // Search though the categories which contain the text entered by the user, and put them in the data grid.
            dgViewShelterInventory.ItemsSource = itemsForSearch.Where(r => r.ItemCategoryID.ToLower().Contains(searchedCategory.ToLower()));
        }
    }
}
