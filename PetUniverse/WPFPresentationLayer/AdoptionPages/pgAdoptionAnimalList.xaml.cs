using DataTransferObjects;
using LogicLayer;
using LogicLayerInterfaces;
using PresentationUtilityCode;
using System;
using System.Collections.Generic;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Forms;
using System.Windows.Input;

namespace WPFPresentationLayer.AdoptionPages
{
    /// <summary>
    /// Creator: Austin Gee
    /// Created: 3/11/2020
    /// Approver: Thomas Dupuy
    /// 
    /// class for the adoption animal list
    /// </summary>
    public partial class pgAdoptionAnimalList : Page
    {
        IAdoptionAnimalManager _adoptionAnimalManager;
        IStatusManager _statusManager;
        IAnimalStatusManager _animalStatusManager;
        AdoptionAnimalVM _adoptionAnimalVM;


        /// <summary>
        /// Creator: Austin Gee
        /// Created: 3/11/2020
        /// Approver: Thomas Dupuy
        /// 
        /// no argument constructor for this class
        /// </summary>
        /// <remarks>
        /// Updated BY: N/A
        /// Updated N/A
        /// Update: N/A
        /// </remarks>
        public pgAdoptionAnimalList()
        {
            InitializeComponent();
            _adoptionAnimalManager = new AdoptionAnimalManager();
            _statusManager = new StatusManager();
            _animalStatusManager = new AnimalStatusManager();

            canAnimalDetails.Visibility = Visibility.Hidden;
            canAnimalList.Visibility = Visibility.Visible;
            txtAddAvailableStatus.Visibility = Visibility.Hidden;

            PopulateAnimalList();
            lblAnimalListTitle.Content = "Animal List";
            populateAvailableStatuses();
        }
        /// <summary>
        /// Creator: Austin Gee
        /// Created: 3/11/2020
        /// Approver: Thomas Dupuy
        /// 
        /// populates the available statuses list box
        /// </summary>
        /// <remarks>
        /// Updated BY: N/A
        /// Updated N/A
        /// Update: N/A
        /// </remarks>
        private void populateAvailableStatuses()
        {
            try
            {
                lbAvailableStatuses.ItemsSource = _statusManager.RetriveAllStatuses();
            }
            catch (Exception ex)
            {
                WPFErrorHandler.ErrorMessage(ex.Message);
            }
        }

        /// <summary>
        /// Creator: Austin Gee
        /// Created: 3/11/2020
        /// Approver: Thomas Dupuy
        /// 
        /// Poulates the dgAnimalList Data Grid with relevant data
        /// </summary>
        /// <remarks>
        /// Updated BY: N/A
        /// Updated N/A
        /// Update: N/A
        /// </remarks>
        private void PopulateAnimalList()
        {
            try
            {
                dgAnimalList.ItemsSource = _adoptionAnimalManager.RetrieveAdoptionAnimalsByActiveAndAdoptable();
            }
            catch (Exception ex)
            {

                WPFErrorHandler.ErrorMessage("Animal List Data cannot be retrieved" + "\n\n" + ex.InnerException.Message);
            }
        }

        /// <summary>
        /// Creator: Austin Gee
        /// Created: 3/11/2020
        /// Approver: Thomas Dupuy
        /// 
        /// Formats dgAnimalList data grid into human readable form
        /// </summary>
        /// <remarks>
        /// Updated BY: N/A
        /// Updated N/A
        /// Update: N/A
        /// </remarks>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void DgAnimalList_AutoGeneratedColumns(object sender, EventArgs e)
        {

            dgAnimalList.Columns.RemoveAt(11);
            dgAnimalList.Columns.RemoveAt(10);
            dgAnimalList.Columns.RemoveAt(9);
            dgAnimalList.Columns.RemoveAt(8);
            dgAnimalList.Columns.RemoveAt(7);
            dgAnimalList.Columns.RemoveAt(6);
            dgAnimalList.Columns.RemoveAt(5);
            dgAnimalList.Columns.RemoveAt(2);
            dgAnimalList.Columns.RemoveAt(0);

            dgAnimalList.Columns[0].Header = "Name";
            dgAnimalList.Columns[1].Header = "Species";
            dgAnimalList.Columns[2].Header = "Breed";
        }

        /// <summary>
        /// Creator: Austin Gee
        /// Created: 3/11/2020
        /// Approver: Thomas Dupuy
        /// 
        /// Shows the details for a chosen animal when it is double clicked
        /// </summary>
        /// <remarks>
        /// Updated BY: N/A
        /// Updated N/A
        /// Update: N/A
        /// </remarks>
        private void dgAnimalList_MouseDoubleClick(object sender, MouseButtonEventArgs e)
        {
            try
            {
                _adoptionAnimalVM = (AdoptionAnimalVM)dgAnimalList.SelectedItem;
                ViewAnimalDetails();
            }
            catch (Exception)
            {
                WPFErrorHandler.ErrorMessage("Please Choose an Animal.");
            }

        }

        /// <summary>
        /// Creator: Austin Gee
        /// Created: 3/11/2020
        /// Approver: Thomas Dupuy
        /// 
        /// Makes the Animal details page visible
        /// </summary>
        /// <remarks>
        /// Updated BY: N/A
        /// Updated N/A
        /// Update: N/A
        /// </remarks>
        private void ViewAnimalDetails()
        {
            if (null != _adoptionAnimalVM)
            {

                txtAnimalBreed.Text = _adoptionAnimalVM.AnimalBreed;
                txtAnimalID.Text = _adoptionAnimalVM.AnimalID.ToString();
                txtAnimalName.Text = _adoptionAnimalVM.AnimalName;
                txtAnimalSpecies.Text = _adoptionAnimalVM.AnimalSpeciesID;
                //txtHandlingNotes.Text = _adoptionAnimalVM.AnimalHandlingNotes;
                //txtKennelInfo.Text = _adoptionAnimalVM.AnimalKennelInfo;
                //txtTemepermentWarning.Text = _adoptionAnimalVM.TempermentWarning;

                dpAnimalDob.SelectedDate = _adoptionAnimalVM.Dob;
                dpArrivalDate.SelectedDate = _adoptionAnimalVM.ArrivalDate;

                chkActive.IsChecked = _adoptionAnimalVM.Active;
                chkAdoptable.IsChecked = _adoptionAnimalVM.Adoptable;
                chkCurrentlyHoused.IsChecked = _adoptionAnimalVM.CurrentlyHoused;
                //chkSpayedNuetered.IsChecked = _adoptionAnimalVM.IsSpayedorNuetered;

                canAnimalList.Visibility = Visibility.Hidden;
                canAnimalDetails.Visibility = Visibility.Visible;

                populateAnimalStatusesListBox();
            }
            else
            {
                WPFErrorHandler.ErrorMessage("Please choose an animal.");
                
            }
        }

        /// <summary>
        /// Creator: Austin Gee
        /// Created: 3/11/2020
        /// Approver: Thomas Dupuy
        /// 
        /// populates the animal statuses list box with the animals current statuses
        /// </summary>
        /// <remarks>
        /// Updated BY: N/A
        /// Updated N/A
        /// Update: N/A
        /// </remarks>
        private void populateAnimalStatusesListBox()
        {
            try
            {
                lbAnimalCurrentStatuses.ItemsSource = _animalStatusManager.RetrieveAnimalStatusesByAnimalID(_adoptionAnimalVM.AnimalID);
            }
            catch (Exception ex)
            {
                WPFErrorHandler.ErrorMessage(ex.Message);
            }

        }

        /// <summary>
        /// Creator: Austin Gee
        /// Created: 3/11/2020
        /// Approver: Micheal Thompson, 4/9/2020
        /// 
        /// Shows the details for a chosen animal when it is selected and the view button is clicked
        /// </summary>
        /// <remarks>
        /// Updated BY: Thomas Dupuy
        /// Updated N/A
        /// Update: N/A
        /// </remarks>
        private void btnView_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                _adoptionAnimalVM = (AdoptionAnimalVM)dgAnimalList.SelectedItem;
                ViewAnimalDetails();
            }
            catch (Exception)
            {
                WPFErrorHandler.ErrorMessage("Please Choose an Animal.");
            }


        }

        /// <summary>
        /// Creator: Austin Gee
        /// Created: 3/11/2020
        /// Approver: Thomas Dupuy
        /// 
        /// This button allows a user to add a new status that an animal may have
        /// </summary>
        /// <remarks>
        /// Updated BY: N/A
        /// Updated N/A
        /// Update: N/A
        /// </remarks>
        private void btnAddStatus_Click(object sender, RoutedEventArgs e)
        {
            btnAddStatus.Visibility = Visibility.Hidden;
            btnSaveStatus.Visibility = Visibility.Visible;
            txtAddAvailableStatus.Visibility = Visibility.Visible;

        }

        /// <summary>
        /// Creator: Austin Gee
        /// Created: 3/11/2020
        /// Approver: Micheal Thompson, 4/9/2020
        /// 
        /// This button allows a user to go back to the animal list page from the details page
        /// </summary>
        /// <remarks>
        /// Updated BY: Thomas Dupuy
        /// Updated N/A
        /// Update: N/A
        /// </remarks>
        private void btnBackFromDetails_Click(object sender, RoutedEventArgs e)
        {
            showAnimalList();
        }
        /// <summary>
        /// Creator: Austin Gee
        /// Created: 3/11/2020
        /// Approver: Thomas Dupuy
        /// 
        /// Loads the animal list page with a reloaded animal List.
        /// </summary>
        /// <remarks>
        /// Updated BY: N/A
        /// Updated N/A
        /// Update: N/A
        /// </remarks>
        private void showAnimalList()
        {
            canAnimalList.Visibility = Visibility.Visible;
            canAnimalDetails.Visibility = Visibility.Hidden;
            PopulateAnimalList();
        }


        /// <summary>
        /// Creator: Austin Gee
        /// Created: 3/11/2020
        /// Approver: Thomas Dupuy
        /// 
        /// This button allows a user save the new status to the database for good
        /// </summary>
        /// <remarks>
        /// Updated BY: N/A
        /// Updated N/A
        /// Update: N/A
        /// </remarks>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnSaveStatus_Click(object sender, RoutedEventArgs e)
        {
            if (txtAddAvailableStatus.Text.IsValidString())
            {
                try
                {
                    _statusManager.AddStatus(txtAddAvailableStatus.Text);
                }
                catch (Exception ex)
                {
                    WPFErrorHandler.ErrorMessage("Could not Add Status\n\n" + ex.InnerException);
                }

            }
            else
            {
                WPFErrorHandler.ErrorMessage("Must enter a value to add a Status.");
            }
            txtAddAvailableStatus.Visibility = Visibility.Hidden;
            btnAddStatus.Visibility = Visibility.Visible;
            btnSaveStatus.Visibility = Visibility.Hidden;
            populateAvailableStatuses();
            txtAddAvailableStatus.Clear();
        }

        /// <summary>
        /// Creator: Austin Gee
        /// Created: 3/11/2020
        /// Approver: Thomas Dupuy
        /// 
        /// adds a status from the available statuses to the statuses that are currently assigned to the animal
        /// </summary>
        /// <remarks>
        /// Updated BY: N/A
        /// Updated N/A
        /// Update: N/A
        /// </remarks>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnStatusToAnimal_Click(object sender, RoutedEventArgs e)
        {
            animalStatusAdder();
        }
        /// <summary>
        /// Creator: Austin Gee
        /// Created: 3/11/2020
        /// Approver: Thomas Dupuy
        /// 
        /// adds a status from the available statuses to the statuses that are currently assigned to the animal
        /// </summary>
        /// <remarks>
        /// Updated BY: N/A
        /// Updated N/A
        /// Update: N/A
        /// </remarks>
        private void animalStatusAdder()
        {
            try
            {
                _animalStatusManager.AddAnimalStatus(_adoptionAnimalVM.AnimalID, lbAvailableStatuses.SelectedItem.ToString());
                populateAnimalStatusesListBox();
            }
            catch (Exception ex)
            {

                WPFErrorHandler.ErrorMessage(ex.Message);
            }
        }

        /// <summary>
        /// Creator: Austin Gee
        /// Created: 3/11/2020
        /// Approver: Thomas Dupuy
        /// 
        /// adds a status from the available statuses to the statuses that are currently assigned to the animal
        /// </summary>
        /// <remarks>
        /// Updated BY: N/A
        /// Updated N/A
        /// Update: N/A
        /// </remarks>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void lbAvailableStatuses_MouseDoubleClick(object sender, MouseButtonEventArgs e)
        {
            animalStatusAdder();
        }

        /// <summary>
        /// Creator: Austin Gee
        /// Created: 3/11/2020
        /// Approver: Thomas Dupuy
        /// 
        /// removes a status from the animals assigned statuses
        /// </summary>
        /// <remarks>
        /// Updated BY: N/A
        /// Updated N/A
        /// Update: N/A
        /// </remarks>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnAnimalToStatus_Click(object sender, RoutedEventArgs e)
        {
            StatusRemover();
        }

        /// <summary>
        /// Creator: Austin Gee
        /// Created: 3/11/2020
        /// Approver: Thomas Dupuy
        /// 
        /// removes a status from the animals assigned statuses
        /// </summary>
        /// <remarks>
        /// Updated BY: N/A
        /// Updated N/A
        /// Update: N/A
        /// </remarks>
        private void StatusRemover()
        {
            try
            {
                _animalStatusManager.DeleteAnimalStatus(_adoptionAnimalVM.AnimalID, lbAnimalCurrentStatuses.SelectedItem.ToString());
                populateAnimalStatusesListBox();
            }
            catch (Exception ex)
            {

                WPFErrorHandler.ErrorMessage(ex.Message);
            }
        }

        /// <summary>
        /// Creator: Austin Gee
        /// Created: 3/11/2020
        /// Approver: Thomas Dupuy
        /// 
        /// removes a status from the animals assigned statuses
        /// </summary>
        /// <remarks>
        /// Updated BY: N/A
        /// Updated N/A
        /// Update: N/A
        /// </remarks>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void lbAnimalCurrentStatuses_MouseDoubleClick(object sender, MouseButtonEventArgs e)
        {
            StatusRemover();
        }

        /// <summary>
        /// Creator: Austin Gee
        /// Created: 3/11/2020
        /// Approver: Thomas Dupuy
        /// 
        /// shows animal list canvas when the page is loaded
        /// </summary>
        /// <remarks>
        /// Updated BY: N/A
        /// Updated N/A
        /// Update: N/A
        /// </remarks>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void Page_Loaded(object sender, RoutedEventArgs e)
        {
            showAnimalList();
        }

        /// <summary>
        /// Creator: Austin Gee
        /// Created: 3/12/2020
        /// Approver: Thomas Dupuy
        /// 
        /// A text box for searching all the avialable animals by name. This clears out the text box
        /// when it gains focus
        /// </summary>
        /// <remarks>
        /// Updated BY: N/A
        /// Updated N/A
        /// Update: N/A
        /// </remarks>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void txtSearch_GotFocus(object sender, RoutedEventArgs e)
        {
            txtSearch.Clear();
            PopulateAnimalList();
        }

        /// <summary>
        /// Creator: Austin Gee
        /// Created: 3/12/2020
        /// Approver: Thomas Dupuy
        /// 
        /// When this is clicked a  search is done for a animal by name
        /// </summary>
        /// <remarks>
        /// Updated BY: N/A
        /// Updated N/A
        /// Update: N/A
        /// </remarks>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnSubmit_Click(object sender, RoutedEventArgs e)
        {
            var animals = new List<Animal>();
            foreach (Animal item in dgAnimalList.Items)
            {
                if (txtSearch.Text == item.AnimalName)
                {
                    animals.Add(item);

                }
            }
            dgAnimalList.ItemsSource = animals;
        }

        /// <summary>
        /// Creator: Austin Gee
        /// Created: 4/4/2020
        /// Approver: Micheal Thompson, 4/9/2020
        /// 
        /// When this is clicked a chosen animal is markd out of inventory
        /// </summary>
        /// <remarks>
        /// Updated BY: N/A
        /// Updated N/A
        /// Update: N/A
        /// </remarks>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnAnimalOutOfInventory_Click(object sender, RoutedEventArgs e)
        {
            if(null != dgAnimalList.SelectedItem)
            {
                if (System.Windows.Forms.MessageBox.Show("Are you sure you want to mark Animal out of Inventory", "Warning", MessageBoxButtons.YesNo) == DialogResult.Yes)
                {
                    _adoptionAnimalManager.DeactivateAnimal(((AdoptionAnimalVM)dgAnimalList.SelectedItem).AnimalID);
                    PopulateAnimalList();
                }

            }
            else
            {

                WPFErrorHandler.ErrorMessage("Please choose an animal first");
            }
        }
    }
}
